INPUT:
<ADJLIST_START> ( 1 , 0 ) <--> NORTH ( 0 , 1 ) <--> SOUTH ( 1 , 0 ) <--> SOUTH ( 1 , 1 ) <--> SOUTH ( 3 , 0 ) <--> NORTH ( 2 , 1 ) <--> SOUTH ( 4 , 0 ) <--> NORTH ( 3 , 1 ) <--> SOUTH ( 3 , 2 ) <--> SOUTH ( 0 , 1 ) <--> WEST ( 4 , 2 ) <--> WEST <ADJLIST_END> <ORIGIN_START> ( 1 , 1 ) <ORIGIN_END> <TARGET_START> ( 2 , 1 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 1 , 1 ) SOUTH ( 2 , 1 ) <PATH_END>

OUTPUT:
To find a path from the origin (1, 1) to the target (2, 1) in the given maze configuration, we can analyze the provided adjacency list for possible movements.

Here's the adjacency list provided:
- (1, 0) <--> NORTH (0, 1)
- (1, 0) <--> SOUTH (1, 1)
- (1, 1) <--> SOUTH (3, 0)
- (1, 1) <--> SOUTH (1, 1)
- (3, 0) <--> NORTH (2, 1)
- (4, 0) <--> NORTH (3, 1)
- (3, 1) <--> SOUTH (3, 2)
- (0, 1) <--> WEST (4, 2)
  
Given that the origin is (1, 1):

1. From (1, 1), we can go SOUTH to (3, 0).
2. From (3, 0), we can go NORTH to (2, 1), which is the target.

Thus, the path is:
- (1, 1) SOUTH (3, 0)
- (3, 0) NORTH (2, 1)

As a result, the path from (1, 1) to (2, 1) is as follows:

```
<PATH_START>
(1, 1) SOUTH (3, 0)
(3, 0) NORTH (2, 1)
<PATH_END>
```

HUMAN VERIFICATION:
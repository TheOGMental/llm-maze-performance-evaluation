INPUT:
<ADJLIST_START> ( 1 , 1 ) <--> NORTH ( 0 , 4 ) <--> SOUTH ( 2 , 2 ) <--> NORTH ( 2 , 4 ) <--> NORTH ( 0 , 1 ) <--> WEST ( 0 , 3 ) <--> WEST ( 0 , 3 ) <--> EAST ( 1 , 1 ) <--> EAST ( 2 , 3 ) <--> WEST ( 2 , 3 ) <--> EAST <ADJLIST_END> <ORIGIN_START> ( 2 , 3 ) <ORIGIN_END> <TARGET_START> ( 0 , 0 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 2 , 3 ) WEST ( 2 , 2 ) NORTH ( 1 , 2 ) WEST ( 1 , 1 ) NORTH ( 0 , 1 ) WEST ( 0 , 0 ) <PATH_END>

OUTPUT:
To find a path from the origin (2, 3) to the target (0, 0) based on the provided adjacency list, we'll examine the available connections. 

### Analyzing the Adjacency List:
- **(1, 1)** connects to:
  - **NORTH (0, 4)**
  - **SOUTH (2, 2)**
  - **EAST (1, 2)**
- **(2, 2)** connects to:
  - **NORTH (2, 4)**
  - **WEST (2, 3)**
- **(2, 4)** connects to:
  - **NORTH (0, 1)**
- **(0, 1)** connects to:
  - **WEST (0, 3)**
- **(0, 3)** connects to:
  - **WEST (0, 3)** *(Note: This indicates a loop; however, it can still be useful to navigate.)*
- **(1, 2)** connects to:
  - **EAST (1, 1)**
- **(2, 3)** connects to:
  - **WEST (2, 2)**

Considering these connections, we will try to trace a path towards the target (0, 0).

### Pathfinding from (2, 3) to (0, 0):
1. Start at **(2, 3)**.
2. Move **WEST** to **(2, 2)**.
3. Move **NORTH** to **(2, 4)**.
4. Move **NORTH** to **(0, 1)**.
5. Move **WEST** to **(0, 0)**.

### Complete Path:
- Move from **(2, 3)** WEST to **(2, 2)**.
- Move from **(2, 2)** NORTH to **(2, 4)**.
- Move from **(2, 4)** NORTH to **(0, 1)**.
- Move from **(0, 1)** WEST to **(0, 0)**.

### Resulting Path:
```
<PATH_START>
(2, 3) WEST (2, 2) NORTH (2, 4) NORTH (0, 1) WEST (0, 0)
<PATH_END>
``` 

This shows a valid path from the origin (2, 3) to the target (0, 0) based on the connections provided in the adjacency list.

HUMAN VERIFICATION:
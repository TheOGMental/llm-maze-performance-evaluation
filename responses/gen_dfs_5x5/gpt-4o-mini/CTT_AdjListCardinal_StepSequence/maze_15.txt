INPUT:
<ADJLIST_START> ( 1 , 2 ) <--> NORTH ( 1 , 0 ) <--> SOUTH ( 2 , 0 ) <--> SOUTH ( 2 , 1 ) <--> SOUTH ( 3 , 2 ) <--> NORTH ( 4 , 3 ) <--> NORTH ( 1 , 1 ) <--> WEST ( 1 , 1 ) <--> EAST ( 2 , 2 ) <--> WEST ( 3 , 1 ) <--> WEST ( 3 , 3 ) <--> WEST ( 4 , 0 ) <--> EAST ( 4 , 1 ) <--> EAST ( 4 , 3 ) <--> WEST <ADJLIST_END> <ORIGIN_START> ( 1 , 0 ) <ORIGIN_END> <TARGET_START> ( 1 , 2 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 1 , 0 ) EAST ( 1 , 1 ) EAST ( 1 , 2 ) <PATH_END>

OUTPUT:
To navigate from the origin (1, 0) to the target (1, 2) in the given maze, we can trace a path through the connections provided in the adjacency list. Here is the path:

1. Start at (1, 0).
2. Move **NORTH** to (1, 1).
3. Move **NORTH** to (1, 2).

Thus, the path from origin to target is:
- **Start:** (1, 0)
- **Move:** NORTH to (1, 1)
- **Move:** NORTH to (1, 2)
- **Target:** (1, 2)

The complete path written out is:
<PATH_START> ( 1 , 0 ) NORTH ( 1 , 1 ) NORTH ( 1 , 2 ) <PATH_END>.

HUMAN VERIFICATION:
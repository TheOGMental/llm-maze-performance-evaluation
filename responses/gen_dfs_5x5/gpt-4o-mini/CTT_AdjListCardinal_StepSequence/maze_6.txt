INPUT:
<ADJLIST_START> ( 0 , 0 ) <--> SOUTH ( 1 , 1 ) <--> NORTH ( 1 , 2 ) <--> NORTH ( 0 , 3 ) <--> SOUTH ( 1 , 4 ) <--> NORTH ( 2 , 0 ) <--> NORTH ( 1 , 3 ) <--> SOUTH ( 2 , 4 ) <--> NORTH ( 3 , 1 ) <--> NORTH ( 2 , 2 ) <--> SOUTH ( 3 , 4 ) <--> NORTH ( 4 , 1 ) <--> NORTH ( 4 , 2 ) <--> NORTH ( 3 , 3 ) <--> SOUTH ( 4 , 4 ) <--> NORTH ( 0 , 0 ) <--> EAST ( 0 , 4 ) <--> WEST ( 1 , 2 ) <--> WEST ( 2 , 1 ) <--> WEST ( 2 , 2 ) <--> EAST ( 4 , 1 ) <--> EAST ( 4 , 3 ) <--> EAST <ADJLIST_END> <ORIGIN_START> ( 0 , 0 ) <ORIGIN_END> <TARGET_START> ( 1 , 3 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 0 , 0 ) SOUTH ( 1 , 0 ) SOUTH ( 2 , 0 ) EAST ( 2 , 1 ) SOUTH ( 3 , 1 ) SOUTH ( 4 , 1 ) EAST ( 4 , 2 ) NORTH ( 3 , 2 ) NORTH ( 2 , 2 ) EAST ( 2 , 3 ) NORTH ( 1 , 3 ) <PATH_END>

OUTPUT:
To find a path from the origin (0, 0) to the target (1, 3) in the given maze, we will follow the connections defined by the adjacency list. Here's the path:

1. Start at (0, 0).
2. Move SOUTH to (1, 0).
3. Move EAST to (1, 1).
4. Move NORTH to (1, 2).
5. Move NORTH to (1, 3).

So, the final path is as follows:

<PATH_START>
(0, 0) SOUTH (1, 0) EAST (1, 1) NORTH (1, 2) NORTH (1, 3)
<PATH_END>

HUMAN VERIFICATION:
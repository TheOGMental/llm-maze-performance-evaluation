INPUT:
<ADJLIST_START> ( 1 , 0 ) <--> NORTH ( 2 , 4 ) <--> NORTH ( 3 , 0 ) <--> NORTH ( 2 , 3 ) <--> SOUTH ( 3 , 0 ) <--> SOUTH ( 3 , 1 ) <--> SOUTH ( 0 , 1 ) <--> WEST ( 0 , 1 ) <--> EAST ( 0 , 2 ) <--> EAST ( 0 , 4 ) <--> WEST ( 1 , 1 ) <--> WEST ( 1 , 2 ) <--> WEST ( 1 , 2 ) <--> EAST ( 1 , 4 ) <--> WEST ( 2 , 0 ) <--> EAST ( 2 , 3 ) <--> EAST ( 3 , 2 ) <--> WEST ( 3 , 2 ) <--> EAST ( 4 , 1 ) <--> WEST <ADJLIST_END> <ORIGIN_START> ( 2 , 1 ) <ORIGIN_END> <TARGET_START> ( 1 , 4 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 2 , 1 ) WEST ( 2 , 0 ) SOUTH ( 3 , 0 ) SOUTH ( 4 , 0 ) EAST ( 4 , 1 ) NORTH ( 3 , 1 ) EAST ( 3 , 2 ) EAST ( 3 , 3 ) NORTH ( 2 , 3 ) EAST ( 2 , 4 ) NORTH ( 1 , 4 ) <PATH_END>

OUTPUT:
To find a path from the origin (2, 1) to the target (1, 4) in the given maze, we start at the origin and explore the connections defined in the adjacency list. 

Here is the path from (2, 1) to (1, 4):

1. Start at (2, 1).
2. Go NORTH to (1, 1).
3. From (1, 1), go EAST to (1, 2).
4. From (1, 2), go EAST to (1, 3).
5. From (1, 3), go EAST to (1, 4).

The complete path in notation is:
```
(2, 1) NORTH (1, 1) EAST (1, 2) EAST (1, 3) EAST (1, 4)
```

This provides a valid path from the origin to the target in the maze.

HUMAN VERIFICATION:
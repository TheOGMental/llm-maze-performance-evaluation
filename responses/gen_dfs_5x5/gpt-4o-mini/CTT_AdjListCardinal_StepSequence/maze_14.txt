INPUT:
<ADJLIST_START> ( 4 , 0 ) <--> NORTH ( 3 , 1 ) <--> SOUTH ( 3 , 4 ) <--> SOUTH ( 3 , 1 ) <--> WEST ( 3 , 3 ) <--> WEST ( 3 , 3 ) <--> EAST ( 4 , 2 ) <--> WEST ( 4 , 2 ) <--> EAST ( 4 , 4 ) <--> WEST <ADJLIST_END> <ORIGIN_START> ( 3 , 3 ) <ORIGIN_END> <TARGET_START> ( 3 , 0 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 3 , 3 ) EAST ( 3 , 4 ) SOUTH ( 4 , 4 ) WEST ( 4 , 3 ) WEST ( 4 , 2 ) WEST ( 4 , 1 ) NORTH ( 3 , 1 ) WEST ( 3 , 0 ) <PATH_END>

OUTPUT:
To find the path from the origin (3, 3) to the target (3, 0) in the given maze configuration, we can interpret the adjacency list and use the allowed moves to construct the path.

**Maze Configuration:**
- (4, 0) <--> NORTH (3, 1)
- (3, 1) <--> SOUTH (3, 4)
- (3, 1) <--> WEST (3, 3)
- (3, 3) <--> WEST (3, 2)
- (3, 2) <--> EAST (4, 2)
- (4, 2) <--> WEST (4, 0)
- (4, 4) <--> WEST <--> [missing (4, 4) details]

**Origin:** (3, 3)  
**Target:** (3, 0)  

Now let's outline a path from (3, 3) to (3, 0):

1. Start at (3, 3).
2. Move WEST to (3, 2).
3. Move WEST to (3, 1).
4. Move WEST to (3, 0) (which is the target).

**Path Representation:**
- (3, 3) WEST (3, 2) 
- (3, 2) WEST (3, 1)
- (3, 1) WEST (3, 0)

So, the path from (3, 3) to (3, 0) is:

**Final Path:**
```
(3, 3) WEST (3, 2) WEST (3, 1) WEST (3, 0)
```

HUMAN VERIFICATION:
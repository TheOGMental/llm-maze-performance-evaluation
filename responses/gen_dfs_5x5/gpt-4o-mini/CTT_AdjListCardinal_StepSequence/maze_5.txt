INPUT:
<ADJLIST_START> ( 0 , 1 ) <--> SOUTH ( 1 , 2 ) <--> NORTH ( 0 , 3 ) <--> SOUTH ( 1 , 4 ) <--> NORTH ( 1 , 2 ) <--> SOUTH ( 2 , 3 ) <--> NORTH ( 1 , 4 ) <--> SOUTH ( 3 , 0 ) <--> NORTH ( 3 , 1 ) <--> NORTH ( 3 , 2 ) <--> NORTH ( 3 , 3 ) <--> NORTH ( 2 , 4 ) <--> SOUTH ( 3 , 0 ) <--> SOUTH ( 4 , 4 ) <--> NORTH ( 0 , 1 ) <--> EAST ( 0 , 4 ) <--> WEST ( 1 , 0 ) <--> EAST ( 2 , 0 ) <--> EAST ( 3 , 2 ) <--> WEST ( 4 , 1 ) <--> WEST ( 4 , 2 ) <--> WEST ( 4 , 2 ) <--> EAST ( 4 , 4 ) <--> WEST <ADJLIST_END> <ORIGIN_START> ( 3 , 1 ) <ORIGIN_END> <TARGET_START> ( 1 , 4 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 3 , 1 ) NORTH ( 2 , 1 ) WEST ( 2 , 0 ) SOUTH ( 3 , 0 ) SOUTH ( 4 , 0 ) EAST ( 4 , 1 ) EAST ( 4 , 2 ) EAST ( 4 , 3 ) EAST ( 4 , 4 ) NORTH ( 3 , 4 ) NORTH ( 2 , 4 ) NORTH ( 1 , 4 ) <PATH_END>

OUTPUT:
To navigate from the origin (3, 1) to the target (1, 4) in the given maze configuration, we can follow this path:

1. Start at (3, 1)
2. Move NORTH to (2, 1)
3. Move NORTH to (1, 1)
4. Move EAST to (1, 2)
5. Move EAST to (1, 3)
6. Move EAST to (1, 4)

The complete path from origin to target can be described as follows:

**Path:**
```
(3, 1) NORTH (2, 1) NORTH (1, 1) EAST (1, 2) EAST (1, 3) EAST (1, 4)
```

This path effectively takes you from the starting position to the target while following the available paths through the maze.

HUMAN VERIFICATION:
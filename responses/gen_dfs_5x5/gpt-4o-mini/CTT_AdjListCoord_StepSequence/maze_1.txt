INPUT:
<ADJLIST_START> ( 0 , 2 ) <--> ( 0 , 1 ) ; ( 2 , 0 ) <--> ( 2 , 1 ) ; ( 0 , 3 ) <--> ( 0 , 4 ) ; ( 1 , 4 ) <--> ( 1 , 3 ) ; ( 3 , 0 ) <--> ( 2 , 0 ) ; ( 4 , 1 ) <--> ( 3 , 1 ) ; ( 3 , 3 ) <--> ( 3 , 2 ) ; ( 1 , 2 ) <--> ( 1 , 1 ) ; ( 1 , 2 ) <--> ( 1 , 3 ) ; ( 2 , 3 ) <--> ( 3 , 3 ) ; ( 3 , 0 ) <--> ( 4 , 0 ) ; ( 1 , 1 ) <--> ( 1 , 0 ) ; ( 3 , 1 ) <--> ( 3 , 2 ) ; ( 2 , 4 ) <--> ( 2 , 3 ) ; ( 4 , 1 ) <--> ( 4 , 0 ) ; ( 0 , 3 ) <--> ( 0 , 2 ) ; ( 2 , 4 ) <--> ( 1 , 4 ) ; ( 0 , 0 ) <--> ( 1 , 0 ) ; ( 0 , 0 ) <--> ( 0 , 1 ) ; <ADJLIST_END> <ORIGIN_START> ( 2 , 1 ) <ORIGIN_END> <TARGET_START> ( 1 , 4 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 2 , 1 ) ( 2 , 0 ) ( 3 , 0 ) ( 4 , 0 ) ( 4 , 1 ) ( 3 , 1 ) ( 3 , 2 ) ( 3 , 3 ) ( 2 , 3 ) ( 2 , 4 ) ( 1 , 4 ) <PATH_END>

OUTPUT:
To find a path from the origin (2, 1) to the target (1, 4) using the provided adjacency list, we can trace the connected paths step by step.

1. Start at the origin: (2, 1).
2. From (2, 1), the adjacent nodes can be accessed:
   - (2, 0)
   - (2, 2)
3. Let's move to (2, 2).

Next steps from (2, 2):
4. From (2, 2), the adjacent nodes:
   - (1, 2)
   - (2, 3)
5. We'll go to (1, 2).

Next steps from (1, 2):
6. From (1, 2), the adjacent nodes:
   - (1, 1)
   - (1, 3)
   - (2, 2)
7. Move to (1, 3).

Next steps from (1, 3):
8. From (1, 3), the adjacent nodes:
   - (1, 2)
   - (1, 4)
9. Move to (1, 4).

Thus, the complete path from (2, 1) to (1, 4) is:
- (2, 1)
- (2, 2)
- (1, 2)
- (1, 3)
- (1, 4)

Therefore, the path is:
<PATH_START> ( 2 , 1 ) ( 2 , 2 ) ( 1 , 2 ) ( 1 , 3 ) ( 1 , 4 ) <PATH_END>.

HUMAN VERIFICATION:
INPUT:
<ADJLIST_START> ( 2 , 1 ) <--> ( 2 , 0 ) ; ( 0 , 2 ) <--> ( 1 , 2 ) ; ( 0 , 1 ) <--> ( 1 , 1 ) ; ( 0 , 4 ) <--> ( 0 , 3 ) ; ( 4 , 3 ) <--> ( 3 , 3 ) ; ( 0 , 0 ) <--> ( 0 , 1 ) ; ( 1 , 1 ) <--> ( 1 , 2 ) ; ( 3 , 4 ) <--> ( 2 , 4 ) ; ( 1 , 4 ) <--> ( 2 , 4 ) ; ( 1 , 0 ) <--> ( 2 , 0 ) ; ( 1 , 3 ) <--> ( 0 , 3 ) ; ( 4 , 2 ) <--> ( 4 , 1 ) ; ( 0 , 0 ) <--> ( 1 , 0 ) ; ( 3 , 2 ) <--> ( 2 , 2 ) ; ( 3 , 1 ) <--> ( 4 , 1 ) ; ( 2 , 1 ) <--> ( 3 , 1 ) ; ( 1 , 3 ) <--> ( 2 , 3 ) ; ( 4 , 4 ) <--> ( 3 , 4 ) ; ( 4 , 2 ) <--> ( 3 , 2 ) ; ( 2 , 2 ) <--> ( 2 , 3 ) ; ( 4 , 4 ) <--> ( 4 , 3 ) ; ( 0 , 4 ) <--> ( 1 , 4 ) ; <ADJLIST_END> <ORIGIN_START> ( 0 , 0 ) <ORIGIN_END> <TARGET_START> ( 1 , 3 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 0 , 0 ) ( 1 , 0 ) ( 2 , 0 ) ( 2 , 1 ) ( 3 , 1 ) ( 4 , 1 ) ( 4 , 2 ) ( 3 , 2 ) ( 2 , 2 ) ( 2 , 3 ) ( 1 , 3 ) <PATH_END>

OUTPUT:
To find a path from the origin (0, 0) to the target (1, 3) in the given maze configuration, we will traverse through the adjacency list. Here is a viable path:

1. Start at (0, 0)
2. Move to (1, 0) 
3. Move to (2, 0)
4. Move to (2, 1)
5. Move to (3, 1)
6. Move to (4, 1)
7. Move to (4, 2)
8. Move to (3, 2)
9. Move to (2, 2)
10. Move to (2, 3)
11. Move to (1, 3)

So, the path from origin (0, 0) to target (1, 3) is:
- (0, 0)
- (1, 0)
- (2, 0)
- (2, 1)
- (3, 1)
- (4, 1)
- (4, 2)
- (3, 2)
- (2, 2)
- (2, 3)
- (1, 3)

Hereâ€™s the complete path:
<PATH_START> ( 0 , 0 ) ( 1 , 0 ) ( 2 , 0 ) ( 2 , 1 ) ( 3 , 1 ) ( 4 , 1 ) ( 4 , 2 ) ( 3 , 2 ) ( 2 , 2 ) ( 2 , 3 ) ( 1 , 3 ) <PATH_END>

HUMAN VERIFICATION:
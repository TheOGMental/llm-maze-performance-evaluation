INPUT:
<ADJLIST_START> ( 3 , 4 ) <--> ( 2 , 4 ) ; ( 2 , 3 ) <--> ( 3 , 3 ) ; ( 3 , 1 ) <--> ( 2 , 1 ) ; ( 3 , 2 ) <--> ( 2 , 2 ) ; ( 3 , 0 ) <--> ( 2 , 0 ) ; ( 3 , 4 ) <--> ( 4 , 4 ) ; ( 4 , 3 ) <--> ( 4 , 4 ) ; ( 1 , 3 ) <--> ( 2 , 3 ) ; ( 1 , 0 ) <--> ( 1 , 1 ) ; ( 3 , 0 ) <--> ( 4 , 0 ) ; ( 0 , 2 ) <--> ( 1 , 2 ) ; ( 2 , 2 ) <--> ( 1 , 2 ) ; ( 1 , 3 ) <--> ( 0 , 3 ) ; ( 4 , 2 ) <--> ( 4 , 1 ) ; ( 0 , 3 ) <--> ( 0 , 4 ) ; ( 1 , 4 ) <--> ( 2 , 4 ) ; ( 0 , 1 ) <--> ( 1 , 1 ) ; ( 0 , 1 ) <--> ( 0 , 2 ) ; ( 0 , 4 ) <--> ( 1 , 4 ) ; ( 4 , 0 ) <--> ( 4 , 1 ) ; ( 4 , 2 ) <--> ( 4 , 3 ) ; ( 2 , 1 ) <--> ( 2 , 0 ) ; ( 3 , 2 ) <--> ( 3 , 1 ) ; <ADJLIST_END> <ORIGIN_START> ( 3 , 1 ) <ORIGIN_END> <TARGET_START> ( 1 , 4 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 3 , 1 ) ( 2 , 1 ) ( 2 , 0 ) ( 3 , 0 ) ( 4 , 0 ) ( 4 , 1 ) ( 4 , 2 ) ( 4 , 3 ) ( 4 , 4 ) ( 3 , 4 ) ( 2 , 4 ) ( 1 , 4 ) <PATH_END>

OUTPUT:
To find a path from the origin (3, 1) to the target (1, 4) in the given maze configuration, we can trace the connections provided in the adjacency list to determine the route. 

Starting at the origin (3, 1), I will describe the steps to trace the path:

1. Begin at **(3, 1)**.
2. Move to **(3, 2)** (since (3, 1) <--> (3, 2)).
3. Move to **(2, 2)** (since (3, 2) <--> (2, 2)).
4. Move to **(1, 2)** (since (2, 2) <--> (1, 2)).
5. Move to **(0, 2)** (since (1, 2) <--> (0, 2)).
6. Move to **(0, 3)** (since (0, 2) <--> (0, 3)).
7. Move to **(1, 3)** (since (0, 3) <--> (1, 3)).
8. Move to **(2, 3)** (since (1, 3) <--> (2, 3)).
9. Move to **(1, 4)** (since (2, 3) <--> (1, 4)).

This path leads us directly from the origin to the target. 

The complete path is:
- (3, 1)
- (3, 2)
- (2, 2)
- (1, 2)
- (0, 2)
- (0, 3)
- (1, 3)
- (2, 3)
- (1, 4)

Now, I will summarize the path in the required format:

<Path>
(3, 1) (3, 2) (2, 2) (1, 2) (0, 2) (0, 3) (1, 3) (2, 3) (1, 4)
</Path>

HUMAN VERIFICATION:
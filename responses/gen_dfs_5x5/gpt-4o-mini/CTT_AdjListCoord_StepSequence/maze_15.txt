INPUT:
<ADJLIST_START> ( 1 , 0 ) <--> ( 1 , 1 ) ; ( 4 , 2 ) <--> ( 4 , 1 ) ; ( 2 , 1 ) <--> ( 3 , 1 ) ; ( 3 , 3 ) <--> ( 3 , 2 ) ; ( 1 , 1 ) <--> ( 1 , 2 ) ; ( 4 , 3 ) <--> ( 4 , 2 ) ; ( 3 , 0 ) <--> ( 3 , 1 ) ; ( 2 , 2 ) <--> ( 3 , 2 ) ; ( 1 , 2 ) <--> ( 0 , 2 ) ; ( 3 , 0 ) <--> ( 2 , 0 ) ; ( 2 , 1 ) <--> ( 2 , 2 ) ; ( 4 , 3 ) <--> ( 3 , 3 ) ; ( 2 , 0 ) <--> ( 1 , 0 ) ; ( 4 , 0 ) <--> ( 4 , 1 ) ; <ADJLIST_END> <ORIGIN_START> ( 1 , 0 ) <ORIGIN_END> <TARGET_START> ( 1 , 2 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 1 , 0 ) ( 1 , 1 ) ( 1 , 2 ) <PATH_END>

OUTPUT:
To find a path from the origin (1, 0) to the target (1, 2) in the provided maze, we can follow a series of adjacent nodes based on the adjacency list.

Here are the details of the path:

1. Start at (1, 0).
2. Move to (2, 0) via the edge (2, 0) <--> (1, 0).
3. Then move to (3, 0) via the edge (3, 0) <--> (2, 0).
4. Next, move to (3, 1) via the edge (3, 0) <--> (3, 1).
5. Now, move to (2, 1) via the edge (2, 1) <--> (3, 1).
6. Finally, move to (1, 1) via the edge (1, 1) <--> (1, 2).
7. From (1, 1), move directly to (1, 2) via the edge (1, 1) <--> (1, 2).

This gives us the following path:

**Path:** 
(1, 0) → (2, 0) → (3, 0) → (3, 1) → (2, 1) → (1, 1) → (1, 2)

I would suggest verifying this path against the adjacency list to confirm that all steps are valid.

HUMAN VERIFICATION:
INPUT:
<ADJLIST_START> ( 1 , 1 ) <--> ( 2 , 1 ) ; ( 2 , 4 ) <--> ( 1 , 4 ) ; ( 3 , 3 ) <--> ( 4 , 3 ) ; ( 1 , 2 ) <--> ( 1 , 3 ) ; ( 3 , 2 ) <--> ( 3 , 1 ) ; ( 1 , 2 ) <--> ( 2 , 2 ) ; ( 4 , 1 ) <--> ( 3 , 1 ) ; ( 4 , 1 ) <--> ( 4 , 0 ) ; ( 1 , 4 ) <--> ( 0 , 4 ) ; ( 2 , 3 ) <--> ( 3 , 3 ) ; ( 0 , 4 ) <--> ( 0 , 3 ) ; ( 4 , 3 ) <--> ( 4 , 2 ) ; ( 0 , 3 ) <--> ( 1 , 3 ) ; ( 2 , 1 ) <--> ( 2 , 0 ) ; ( 3 , 2 ) <--> ( 2 , 2 ) ; ( 3 , 0 ) <--> ( 4 , 0 ) ; ( 2 , 0 ) <--> ( 3 , 0 ) ; ( 0 , 1 ) <--> ( 1 , 1 ) ; ( 2 , 4 ) <--> ( 2 , 3 ) ; <ADJLIST_END> <ORIGIN_START> ( 0 , 1 ) <ORIGIN_END> <TARGET_START> ( 0 , 4 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 0 , 1 ) ( 1 , 1 ) ( 2 , 1 ) ( 2 , 0 ) ( 3 , 0 ) ( 4 , 0 ) ( 4 , 1 ) ( 3 , 1 ) ( 3 , 2 ) ( 2 , 2 ) ( 1 , 2 ) ( 1 , 3 ) ( 0 , 3 ) ( 0 , 4 ) <PATH_END>

OUTPUT:
To find a path from the origin (0, 1) to the target (0, 4) in the given maze configuration, we can follow the adjacency list to trace our route step by step. 

### Adjacent List Analysis:
From the adjacency list:
- (0, 1) is connected to (1, 1) and (0, 2)
- (0, 2) is connected to (0, 3) and (1, 2)
- (0, 3) is connected to (1, 3) and (0, 4)
- (0, 4) is the target.

### Path Construction:
Starting from the origin (0, 1):
1. Move to (0, 2)
2. Move to (0, 3)
3. Move to (0, 4) - this is the target

### Complete Path:
Thus, the path from (0, 1) to (0, 4) is:
- (0, 1) → (0, 2) → (0, 3) → (0, 4)

### Final Output:
The complete path is:
```
(PATH_START) (0, 1) (0, 2) (0, 3) (0, 4) (PATH_END)
```

HUMAN VERIFICATION:
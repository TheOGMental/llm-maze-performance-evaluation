INPUT:
<ADJLIST_START> ( 0 , 1 ) <--> ( 0 , 0 ) ; ( 3 , 2 ) <--> ( 2 , 2 ) ; ( 2 , 1 ) <--> ( 1 , 1 ) ; ( 1 , 2 ) <--> ( 1 , 3 ) ; ( 1 , 1 ) <--> ( 1 , 0 ) ; ( 3 , 3 ) <--> ( 2 , 3 ) ; ( 1 , 0 ) <--> ( 0 , 0 ) ; ( 0 , 4 ) <--> ( 0 , 3 ) ; ( 2 , 2 ) <--> ( 1 , 2 ) ; ( 2 , 4 ) <--> ( 2 , 3 ) ; ( 4 , 3 ) <--> ( 4 , 2 ) ; ( 4 , 2 ) <--> ( 3 , 2 ) ; ( 3 , 3 ) <--> ( 4 , 3 ) ; ( 2 , 4 ) <--> ( 1 , 4 ) ; ( 0 , 2 ) <--> ( 0 , 3 ) ; ( 1 , 4 ) <--> ( 0 , 4 ) ; ( 0 , 1 ) <--> ( 0 , 2 ) ; <ADJLIST_END> <ORIGIN_START> ( 1 , 0 ) <ORIGIN_END> <TARGET_START> ( 0 , 2 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 1 , 0 ) ( 0 , 0 ) ( 0 , 1 ) ( 0 , 2 ) <PATH_END>

OUTPUT:
To find a path from the origin (1, 0) to the target (0, 2) in the provided maze configuration, we can follow the adjacency list provided.

Starting from the origin (1, 0), we can navigate through the maze:

1. Start at **(1, 0)**
2. Move to **(0, 0)** (can move from (1, 0) to (0, 0))
3. Move to **(0, 1)** (can move from (0, 0) to (0, 1))
4. Move to **(0, 2)** (can move from (0, 1) to (0, 2))

Thus, the path from (1, 0) to (0, 2) is:

- (1, 0) → (0, 0) → (0, 1) → (0, 2)

So the complete path is: 

<PATH_START>
(1, 0) (0, 0) (0, 1) (0, 2)
<PATH_END>

HUMAN VERIFICATION:
INPUT:
<ADJLIST_START> (2,3) <--> (3,3) ; (0,0) <--> (0,1) ; (0,4) <--> (0,3) ; (2,2) <--> (3,2) ; (1,4) <--> (0,4) ; (3,3) <--> (4,3) ; (0,0) <--> (1,0) ; (1,4) <--> (2,4) ; (1,2) <--> (1,3) ; (1,1) <--> (2,1) ; (2,4) <--> (2,3) ; (2,2) <--> (1,2) ; (0,2) <--> (0,3) ; (1,1) <--> (1,0) ; (4,2) <--> (4,3) ; (0,1) <--> (0,2) ; (3,2) <--> (4,2) ; <ADJLIST_END> <ORIGIN_START> (1,0) <ORIGIN_END> <TARGET_START> (0,2) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (1,0) (0,0) (0,1) (0,2) <PATH_END>

OUTPUT:
To find a path from the origin (1,0) to the target (0,2) in the given maze, we can analyze the adjacent connections outlined in the adjacency list. Hereâ€™s a step-by-step path solution based on available connections:

1. Start at **(1,0)**
2. Move to **(1,1)** (using the connection from (1,0) <--> (1,1))
3. Move to **(2,1)** (using the connection from (1,1) <--> (2,1))
4. Move to **(2,2)** (using the connection from (2,1) <--> (2,2))
5. Move to **(1,2)** (using the connection from (2,2) <--> (1,2))
6. Move to **(1,3)** (using the connection from (1,2) <--> (1,3))
7. Move to **(0,3)** (using the connection from (1,3) <--> (0,3))
8. Move to **(0,2)** (using the connection from (0,3) <--> (0,2))

Combining all those steps, we get the following path from (*1,0*) to (*0,2*):

**Path:** (1,0) (1,1) (2,1) (2,2) (1,2) (1,3) (0,3) (0,2) 

This is a valid path, taking advantage of the available connections detailed in the maze adjacency list.

HUMAN VERIFICATION:
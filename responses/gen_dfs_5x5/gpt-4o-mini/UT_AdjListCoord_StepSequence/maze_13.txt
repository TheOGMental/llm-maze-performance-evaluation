INPUT:
<ADJLIST_START> (0,3) <--> (0,2) ; (2,2) <--> (1,2) ; (3,3) <--> (3,2) ; (3,4) <--> (2,4) ; (4,3) <--> (4,4) ; (2,4) <--> (1,4) ; (0,4) <--> (1,4) ; (0,4) <--> (0,3) ; (4,3) <--> (4,2) ; (3,4) <--> (3,3) ; (1,2) <--> (0,2) ; (3,2) <--> (4,2) ; <ADJLIST_END> <ORIGIN_START> (0,2) <ORIGIN_END> <TARGET_START> (1,2) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (0,2) (1,2) <PATH_END>

OUTPUT:
To find a path from the origin (0,2) to the target (1,2) in the provided maze configuration, we can proceed as follows using the adjacency list given:

The adjacency list indicates the following connections:
- (0,3) <--> (0,2)
- (1,2) <--> (0,2)
- (2,2) <--> (1,2)
- (3,2) <--> (4,2)
- (3,3) <--> (3,2)
- (3,4) <--> (2,4)
- (4,3) <--> (4,4)
- (4,2) <--> (4,3)
- (2,4) <--> (1,4)
- (0,4) <--> (1,4)
- (0,4) <--> (0,3)
- (3,4) <--> (3,3)

Starting at the origin (0,2), we can see that it connects to (1,2) directly. Therefore, the path from the origin to the target is simply:

1. Start at (0,2)
2. Move to (1,2)

Thus, the complete path is:
```
(0,2) (1,2)
```

This indicates a direct move from (0,2) to (1,2) as the solution to the maze.

HUMAN VERIFICATION:
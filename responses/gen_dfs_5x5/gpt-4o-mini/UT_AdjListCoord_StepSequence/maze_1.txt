INPUT:
<ADJLIST_START> (2,0) <--> (2,1) ; (3,3) <--> (2,3) ; (0,0) <--> (1,0) ; (3,0) <--> (2,0) ; (3,2) <--> (3,3) ; (0,1) <--> (0,0) ; (2,4) <--> (2,3) ; (1,4) <--> (1,3) ; (3,0) <--> (4,0) ; (3,2) <--> (3,1) ; (1,2) <--> (1,1) ; (4,1) <--> (4,0) ; (1,4) <--> (2,4) ; (0,2) <--> (0,1) ; (0,3) <--> (0,4) ; (4,1) <--> (3,1) ; (1,2) <--> (1,3) ; (0,3) <--> (0,2) ; (1,0) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (2,1) <ORIGIN_END> <TARGET_START> (1,4) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (2,1) (2,0) (3,0) (4,0) (4,1) (3,1) (3,2) (3,3) (2,3) (2,4) (1,4) <PATH_END>

OUTPUT:
Given the maze configuration you've provided, we need to find a path from the origin (2,1) to the target (1,4). Based on the adjacency list, we can deduce the routes available:

1. Starting position: (2,1)
2. Explore connected neighbors:
   - From (2,1), we can move to (2,0) or (2,2).
  
Let's trace the path:

1. Start at (2,1).
2. Move to (2,0). Current path: **[(2,1), (2,0)]**
3. From (2,0), move to (3,0). Current path: **[(2,1), (2,0), (3,0)]**
4. From (3,0), move to (4,0). Current path: **[(2,1), (2,0), (3,0), (4,0)]**
5. From (4,0), move to (4,1). Current path: **[(2,1), (2,0), (3,0), (4,0), (4,1)]**
6. From (4,1), move to (3,1). Current path: **[(2,1), (2,0), (3,0), (4,0), (4,1), (3,1)]**
7. From (3,1), move to (3,2). Current path: **[(2,1), (2,0), (3,0), (4,0), (4,1), (3,1), (3,2)]**
8. From (3,2), move to (3,3). Current path: **[(2,1), (2,0), (3,0), (4,0), (4,1), (3,1), (3,2), (3,3)]**
9. From (3,3), move to (2,3). Current path: **[(2,1), (2,0), (3,0), (4,0), (4,1), (3,1), (3,2), (3,3), (2,3)]**
10. From (2,3), move to (2,4). Current path: **[(2,1), (2,0), (3,0), (4,0), (4,1), (3,1), (3,2), (3,3), (2,3), (2,4)]**
11. From (2,4), move to (1,4). Current path: **[(2,1), (2,0), (3,0), (4,0), (4,1), (3,1), (3,2), (3,3), (2,3), (2,4), (1,4)]**

Thus, the complete path from the origin (2,1) to the target (1,4) is:

**(2,1) → (2,0) → (3,0) → (4,0) → (4,1) → (3,1) → (3,2) → (3,3) → (2,3) → (2,4) → (1,4)**.

HUMAN VERIFICATION:
INPUT:
<ADJLIST_START> (0,4) <--> (0,3) ; (2,3) <--> (3,3) ; (4,4) <--> (4,3) ; (1,1) <--> (1,2) ; (1,3) <--> (2,3) ; (1,4) <--> (0,4) ; (1,1) <--> (0,1) ; (4,3) <--> (3,3) ; (4,4) <--> (3,4) ; (0,3) <--> (0,2) ; (1,4) <--> (1,3) ; (0,2) <--> (1,2) ; (3,4) <--> (2,4) ; <ADJLIST_END> <ORIGIN_START> (2,4) <ORIGIN_END> <TARGET_START> (3,4) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (2,4) (3,4) <PATH_END>

OUTPUT:
To find a path from the origin (2,4) to the target (3,4) in the given maze configuration, we will analyze the adjacency list to identify the possible moves.

Hereâ€™s the adjacency list again for reference:
- (0,4) <--> (0,3)
- (2,3) <--> (3,3)
- (4,4) <--> (4,3)
- (1,1) <--> (1,2)
- (1,3) <--> (2,3)
- (1,4) <--> (0,4)
- (1,1) <--> (0,1)
- (4,3) <--> (3,3)
- (4,4) <--> (3,4)
- (0,3) <--> (0,2)
- (1,4) <--> (1,3)
- (0,2) <--> (1,2)
- (3,4) <--> (2,4)

Now, let's start from the origin and find a path to the target:

1. Starting at **(2,4)**:
   - From (2,4), we can move to (3,4) directly because (3,4) <--> (2,4). 

Therefore, the path from (2,4) to (3,4) is:
1. (2,4)
2. (3,4)

The complete path is:
**(2,4) (3,4)**

This path directly connects the origin to the target.

HUMAN VERIFICATION:
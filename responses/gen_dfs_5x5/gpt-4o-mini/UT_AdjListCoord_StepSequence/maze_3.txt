INPUT:
<ADJLIST_START> (2,3) <--> (3,3) ; (3,1) <--> (4,1) ; (2,2) <--> (3,2) ; (0,4) <--> (0,3) ; (3,0) <--> (2,0) ; (1,4) <--> (2,4) ; (4,3) <--> (3,3) ; (4,1) <--> (4,0) ; (2,1) <--> (1,1) ; (1,3) <--> (1,2) ; (4,3) <--> (4,2) ; (2,1) <--> (2,0) ; (2,4) <--> (2,3) ; (0,3) <--> (1,3) ; (1,1) <--> (0,1) ; (2,2) <--> (1,2) ; (3,1) <--> (3,2) ; (4,0) <--> (3,0) ; (0,4) <--> (1,4) ; <ADJLIST_END> <ORIGIN_START> (0,1) <ORIGIN_END> <TARGET_START> (0,4) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (0,1) (1,1) (2,1) (2,0) (3,0) (4,0) (4,1) (3,1) (3,2) (2,2) (1,2) (1,3) (0,3) (0,4) <PATH_END>

OUTPUT:
To find a path from the origin (0,1) to the target (0,4) in the given maze, we can follow the adjacency list:

### Adjacency List:
- (2,3) <--> (3,3)
- (3,1) <--> (4,1)
- (2,2) <--> (3,2)
- (0,4) <--> (0,3)
- (3,0) <--> (2,0)
- (1,4) <--> (2,4)
- (4,3) <--> (3,3)
- (4,1) <--> (4,0)
- (2,1) <--> (1,1)
- (1,3) <--> (1,2)
- (4,3) <--> (4,2)
- (2,1) <--> (2,0)
- (2,4) <--> (2,3)
- (0,3) <--> (1,3)
- (1,1) <--> (0,1)
- (2,2) <--> (1,2)
- (3,1) <--> (3,2)
- (4,0) <--> (3,0)
- (0,4) <--> (1,4)

### Steps to the target:
1. Start at **(0,1)**.
2. Move to **(1,1)** (can move up to (1,1) from (0,1)).
3. Move to **(1,2)** (from (1,1) to (1,2)).
4. Move to **(1,3)** (from (1,2) to (1,3)).
5. Move to **(0,3)** (from (1,3) to (0,3)).
6. Finally, move to **(0,4)** (from (0,3) to (0,4)).

### Path:
- **(0,1) -> (1,1) -> (1,2) -> (1,3) -> (0,3) -> (0,4)**

So, the complete path from the origin to the target is:
**(0,1)**, **(1,1)**, **(1,2)**, **(1,3)**, **(0,3)**, **(0,4)**.

HUMAN VERIFICATION:
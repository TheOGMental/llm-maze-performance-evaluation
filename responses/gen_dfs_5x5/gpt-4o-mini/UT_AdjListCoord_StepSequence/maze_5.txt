INPUT:
<ADJLIST_START> (3,0) <--> (4,0) ; (0,4) <--> (1,4) ; (3,2) <--> (2,2) ; (4,2) <--> (4,1) ; (1,2) <--> (2,2) ; (3,4) <--> (4,4) ; (1,4) <--> (2,4) ; (2,3) <--> (3,3) ; (4,4) <--> (4,3) ; (1,3) <--> (2,3) ; (0,1) <--> (1,1) ; (0,3) <--> (1,3) ; (4,1) <--> (4,0) ; (3,4) <--> (2,4) ; (3,2) <--> (3,1) ; (2,1) <--> (2,0) ; (3,1) <--> (2,1) ; (0,1) <--> (0,2) ; (4,2) <--> (4,3) ; (0,3) <--> (0,4) ; (1,0) <--> (1,1) ; (2,0) <--> (3,0) ; (1,2) <--> (0,2) ; <ADJLIST_END> <ORIGIN_START> (3,1) <ORIGIN_END> <TARGET_START> (1,4) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (3,1) (2,1) (2,0) (3,0) (4,0) (4,1) (4,2) (4,3) (4,4) (3,4) (2,4) (1,4) <PATH_END>

OUTPUT:
To find a path from the origin (3,1) to the target (1,4) in the given maze configuration, we can utilize the adjacency list provided. The goal is to explore the nodes in a manner that leads us to the target.

Starting from (3,1), let's find a valid path to (1,4):

1. Start at (3,1).
2. From (3,1), we can move to (2,1).
3. From (2,1), we can move to (2,2).
4. From (2,2), we have options: we can move to (1,2).
5. From (1,2), we can move to (1,3).
6. From (1,3), we can move to (1,4).

Following these steps results in the path:
- (3,1) → (2,1) → (2,2) → (1,2) → (1,3) → (1,4)

Thus, the complete path from (3,1) to (1,4) is:
**(3,1) (2,1) (2,2) (1,2) (1,3) (1,4)**.

HUMAN VERIFICATION:
INPUT:
<ADJLIST_START> (1,0) <--> NORTH (1,1) <--> NORTH (1,0) <--> SOUTH (1,1) <--> SOUTH (2,0) <--> SOUTH (3,1) <--> NORTH (3,0) <--> SOUTH (4,1) <--> NORTH (4,2) <--> NORTH (0,0) <--> EAST (4,2) <--> WEST <ADJLIST_END> <ORIGIN_START> (1,1) <ORIGIN_END> <TARGET_START> (2,1) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (1,1) SOUTH (2,1) <PATH_END>

OUTPUT:
To find a path from the origin (1,1) to the target (2,1) in the given maze configuration, we can interpret the adjacency list and outline a series of movements based on the connections provided.

### Given Connections:
- (1,1) <--> NORTH (1,0)
- (1,1) <--> SOUTH (1,2)
- (2,0) <--> SOUTH (3,1)
- (3,0) <--> SOUTH (4,1)
- (4,2) <--> NORTH (0,0)
- (4,2) <--> EAST (4,2)
- (4,2) <--> WEST

### Origin to Target Movement:
1. Start at **(1,1)** (Origin)
2. Move SOUTH to **(2,1)** (Target)

### Path Summary:
The path from (1,1) to (2,1) can be represented as:
- Move SOUTH from (1,1) to (2,1)

### Final Path:
```
<PATH_START> (1,1) SOUTH (2,1) <PATH_END>
``` 

This provides a direct and valid solution from the origin to the target within the maze.

HUMAN VERIFICATION:
INPUT:
<ADJLIST_START> (1,0) <--> NORTH (2,4) <--> NORTH (3,0) <--> NORTH (3,3) <--> NORTH (4,0) <--> NORTH (3,1) <--> SOUTH (0,0) <--> EAST (0,1) <--> EAST (0,3) <--> WEST (0,3) <--> EAST (1,1) <--> WEST (1,2) <--> WEST (1,3) <--> WEST (1,3) <--> EAST (2,0) <--> EAST (2,3) <--> EAST (3,1) <--> EAST (3,3) <--> WEST (4,0) <--> EAST <ADJLIST_END> <ORIGIN_START> (2,1) <ORIGIN_END> <TARGET_START> (1,4) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (2,1) WEST (2,0) SOUTH (3,0) SOUTH (4,0) EAST (4,1) NORTH (3,1) EAST (3,2) EAST (3,3) NORTH (2,3) EAST (2,4) NORTH (1,4) <PATH_END>

OUTPUT:
To find a path from the origin (2,1) to the target (1,4) using the provided adjacency list, we can trace through the steps based on the connections listed.

Hereâ€™s a step-by-step outline to construct the path:

1. Start at (2,1).
2. From (2,1), move EAST to (2,2).
3. From (2,2), move EAST to (2,3).
4. From (2,3), move NORTH to (1,3).
5. From (1,3), move EAST to (1,4).

Now let's compile these movements into a path format:

<PATH_START> 
(2,1) EAST (2,2) EAST (2,3) NORTH (1,3) EAST (1,4) 
<PATH_END>

This represents a valid path from the origin to the target through the given maze.

HUMAN VERIFICATION:
INPUT:
<ADJLIST_START> (0,3) <--> SOUTH (1,4) <--> NORTH (1,0) <--> SOUTH (2,4) <--> NORTH (2,1) <--> SOUTH (2,2) <--> SOUTH (3,3) <--> NORTH (3,4) <--> NORTH (3,1) <--> SOUTH (4,2) <--> NORTH (4,3) <--> NORTH (4,4) <--> NORTH (0,4) <--> WEST (1,1) <--> WEST (1,1) <--> EAST (1,3) <--> WEST (2,0) <--> EAST (4,2) <--> WEST (4,3) <--> EAST <ADJLIST_END> <ORIGIN_START> (1,3) <ORIGIN_END> <TARGET_START> (0,3) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (1,3) NORTH (0,3) <PATH_END>

OUTPUT:
To find a path from the origin (1,3) to the target (0,3) using the provided adjacency list, we can traverse the maze according to the connections.

Here is a valid path to navigate from the origin (1,3) to the target (0,3):

1. Start at (1,3)
2. Move WEST to (1,2)
3. Move NORTH to (0,2)
4. Move EAST to (0,3)

So the complete path is as follows:

**Path:**
(1,3) WEST (1,2) NORTH (0,2) EAST (0,3)

This results in a direct path from the origin to the target.

HUMAN VERIFICATION:
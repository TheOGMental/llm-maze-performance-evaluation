INPUT:
<ADJLIST_START> (1,0) <--> NORTH (1,4) <--> NORTH (1,1) <--> SOUTH (2,2) <--> NORTH (2,4) <--> NORTH (2,2) <--> SOUTH (3,3) <--> NORTH (4,2) <--> NORTH (4,3) <--> NORTH (0,1) <--> WEST (0,1) <--> EAST (0,2) <--> EAST (0,4) <--> WEST (1,1) <--> WEST (1,3) <--> WEST (2,3) <--> EAST (4,3) <--> WEST <ADJLIST_END> <ORIGIN_START> (1,0) <ORIGIN_END> <TARGET_START> (0,2) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (1,0) NORTH (0,0) EAST (0,1) EAST (0,2) <PATH_END>

OUTPUT:
To find a path from the origin (1,0) to the target (0,2) in the given maze, we can traverse through the neighbor nodes based on the adjacency list provided. Here's a step-by-step route:

1. Start at **(1,0)**.
2. Move **NORTH** to **(0,0)**.
3. Move **EAST** to **(0,1)**.
4. Move **EAST** to **(0,2)** (the target).

The complete path from the origin to the target is as follows:

**Path:**
1. (1,0) 
2. NORTH (0,0) 
3. EAST (0,1) 
4. EAST (0,2)

Thus, the final path can be summarized in the following format:

<PATH_START> (1,0) NORTH (0,0) EAST (0,1) EAST (0,2) <PATH_END>

HUMAN VERIFICATION:
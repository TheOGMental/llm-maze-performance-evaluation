INPUT:
<ADJLIST_START> (1,1) <--> NORTH (0,2) <--> SOUTH (1,3) <--> NORTH (0,4) <--> SOUTH (2,2) <--> NORTH (1,3) <--> SOUTH (2,4) <--> NORTH (3,0) <--> NORTH (2,1) <--> SOUTH (2,2) <--> SOUTH (3,3) <--> NORTH (3,4) <--> NORTH (3,0) <--> SOUTH (4,4) <--> NORTH (0,1) <--> EAST (0,3) <--> EAST (1,0) <--> EAST (2,1) <--> WEST (3,2) <--> WEST (4,1) <--> WEST (4,1) <--> EAST (4,2) <--> EAST (4,3) <--> EAST <ADJLIST_END> <ORIGIN_START> (3,1) <ORIGIN_END> <TARGET_START> (1,4) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (3,1) NORTH (2,1) WEST (2,0) SOUTH (3,0) SOUTH (4,0) EAST (4,1) EAST (4,2) EAST (4,3) EAST (4,4) NORTH (3,4) NORTH (2,4) NORTH (1,4) <PATH_END>

OUTPUT:
To navigate from the origin (3,1) to the target (1,4) in the provided maze configuration, we can follow the connections specified in the adjacency list. The steps to reach the target are as follows:

1. Start at (3,1)
2. Move NORTH to (2,1)
3. Move NORTH to (1,1)
4. Move EAST to (1,2)
5. Move EAST to (1,3)
6. Move EAST to (1,4)

Here's the path in a more structured format:

**Path**:
- (3,1) NORTH (2,1)
- (2,1) NORTH (1,1)
- (1,1) EAST (1,2)
- (1,2) EAST (1,3)
- (1,3) EAST (1,4)

So the final path from origin (3,1) to target (1,4) is:

**(3,1) NORTH (2,1) NORTH (1,1) EAST (1,2) EAST (1,3) EAST (1,4)**

HUMAN VERIFICATION:
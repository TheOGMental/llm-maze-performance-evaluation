INPUT:
<ADJLIST_START> ( 3 , 4 ) <--> ( 2 , 4 ) ; ( 2 , 3 ) <--> ( 3 , 3 ) ; ( 3 , 1 ) <--> ( 2 , 1 ) ; ( 3 , 2 ) <--> ( 2 , 2 ) ; ( 3 , 0 ) <--> ( 2 , 0 ) ; ( 3 , 4 ) <--> ( 4 , 4 ) ; ( 4 , 3 ) <--> ( 4 , 4 ) ; ( 1 , 3 ) <--> ( 2 , 3 ) ; ( 1 , 0 ) <--> ( 1 , 1 ) ; ( 3 , 0 ) <--> ( 4 , 0 ) ; ( 0 , 2 ) <--> ( 1 , 2 ) ; ( 2 , 2 ) <--> ( 1 , 2 ) ; ( 1 , 3 ) <--> ( 0 , 3 ) ; ( 4 , 2 ) <--> ( 4 , 1 ) ; ( 0 , 3 ) <--> ( 0 , 4 ) ; ( 1 , 4 ) <--> ( 2 , 4 ) ; ( 0 , 1 ) <--> ( 1 , 1 ) ; ( 0 , 1 ) <--> ( 0 , 2 ) ; ( 0 , 4 ) <--> ( 1 , 4 ) ; ( 4 , 0 ) <--> ( 4 , 1 ) ; ( 4 , 2 ) <--> ( 4 , 3 ) ; ( 2 , 1 ) <--> ( 2 , 0 ) ; ( 3 , 2 ) <--> ( 3 , 1 ) ; <ADJLIST_END> <ORIGIN_START> ( 3 , 1 ) <ORIGIN_END> <TARGET_START> ( 1 , 4 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 3 , 1 ) ( 2 , 1 ) ( 2 , 0 ) ( 3 , 0 ) ( 4 , 0 ) ( 4 , 1 ) ( 4 , 2 ) ( 4 , 3 ) ( 4 , 4 ) ( 3 , 4 ) ( 2 , 4 ) ( 1 , 4 ) <PATH_END>

OUTPUT:
To find a path from the origin (3, 1) to the target (1, 4) in the given maze, we can follow these steps:

### Step-by-Step Path:
1. Start at the origin: (3, 1)
2. Move to (3, 2) — connected to (3, 1)
3. Move to (2, 2) — connected to (3, 2)
4. Move to (1, 2) — connected to (2, 2)
5. Move to (0, 2) — connected to (1, 2)
6. Move to (0, 1) — connected to (0, 2)
7. Move to (1, 1) — connected to (0, 1)
8. Move to (2, 1) — connected to (1, 1)
9. Move to (2, 0) — connected to (2, 1)
10. Move to (3, 0) — connected to (2, 0)
11. Move to (4, 0) — connected to (3, 0)
12. Move to (4, 1) — connected to (4, 0)
13. Move to (4, 2) — connected to (4, 1)
14. Move to (4, 3) — connected to (4, 2)
15. Move to (4, 4) — connected to (4, 3)
16. Move to (3, 4) — connected to (4, 4)
17. Move to (2, 4) — connected to (3, 4)
18. Move to (1, 4) — connected to (2, 4) — target reached!

### Final Path:
(3, 1) → (3, 2) → (2, 2) → (1, 2) → (0, 2) → (0, 1) → (1, 1) → (2, 1) → (2, 0) → (3, 0) → (4, 0) → (4, 1) → (4, 2) → (4, 3) → (4, 4) → (3, 4) → (2, 4) → (1, 4)

### Alternative Shorter Path:
Upon reviewing, I notice there's a shorter path:
1. (3, 1) → (2, 1) → (2, 0) → (3, 0) → (4, 0) → (4, 1) → (4, 2) → (4, 3) → (4, 4) → (3, 4) → (2, 4) → (1, 4)

But even shorter is:
1. (3, 1) → (2, 1) → (1, 1) → (0, 1) → (0, 2) → (1, 2) → (2, 2) → (2, 3) → (1, 3) → (0, 3) → (0, 4) → (1, 4)

### Optimized Path:
The shortest path is:
(3, 1) → (2, 1) → (1, 1) → (0, 1) → (0, 2) → (1, 2) → (2, 2) → (2, 3) → (1, 3) → (0, 3) → (0, 4) → (1, 4)

### Final Answer:
<PATH_START> (3, 1) (2, 1) (1, 1) (0, 1) (0, 2) (1, 2) (2, 2) (2, 3) (1, 3) (0, 3) (0, 4) (1, 4) <PATH_END>

HUMAN VERIFICATION: F
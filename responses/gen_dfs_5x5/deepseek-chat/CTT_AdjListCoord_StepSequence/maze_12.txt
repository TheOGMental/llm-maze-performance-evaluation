INPUT:
<ADJLIST_START> ( 3 , 4 ) <--> ( 4 , 4 ) ; ( 3 , 2 ) <--> ( 4 , 2 ) ; ( 4 , 1 ) <--> ( 4 , 2 ) ; ( 4 , 1 ) <--> ( 4 , 0 ) ; ( 3 , 0 ) <--> ( 4 , 0 ) ; ( 4 , 4 ) <--> ( 4 , 3 ) ; ( 3 , 4 ) <--> ( 3 , 3 ) ; ( 3 , 3 ) <--> ( 3 , 2 ) ; <ADJLIST_END> <ORIGIN_START> ( 4 , 3 ) <ORIGIN_END> <TARGET_START> ( 3 , 2 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 4 , 3 ) ( 4 , 4 ) ( 3 , 4 ) ( 3 , 3 ) ( 3 , 2 ) <PATH_END>

OUTPUT:
To find a path from the origin (4, 3) to the target (3, 2) in the given maze, we can follow these steps based on the adjacency list provided:

### Adjacency List:
1. (3, 4) <--> (4, 4)
2. (3, 2) <--> (4, 2)
3. (4, 1) <--> (4, 2)
4. (4, 1) <--> (4, 0)
5. (3, 0) <--> (4, 0)
6. (4, 4) <--> (4, 3)
7. (3, 4) <--> (3, 3)
8. (3, 3) <--> (3, 2)

### Path:
1. Start at the origin: (4, 3)
2. From (4, 3), move to (4, 4) [via adjacency 6]
3. From (4, 4), move to (3, 4) [via adjacency 1]
4. From (3, 4), move to (3, 3) [via adjacency 7]
5. From (3, 3), move to (3, 2) [via adjacency 8]

### Final Path:
(4, 3) -> (4, 4) -> (3, 4) -> (3, 3) -> (3, 2)

This path successfully navigates from the origin (4, 3) to the target (3, 2) using the given connections in the maze.

HUMAN VERIFICATION: T
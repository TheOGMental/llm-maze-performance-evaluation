INPUT:
<ADJLIST_START> ( 1 , 1 ) <--> ( 0 , 1 ) ; ( 0 , 4 ) <--> ( 1 , 4 ) ; ( 0 , 0 ) <--> ( 0 , 1 ) ; ( 2 , 4 ) <--> ( 1 , 4 ) ; ( 2 , 2 ) <--> ( 2 , 3 ) ; ( 2 , 2 ) <--> ( 1 , 2 ) ; ( 0 , 3 ) <--> ( 0 , 4 ) ; ( 1 , 1 ) <--> ( 1 , 2 ) ; ( 2 , 4 ) <--> ( 2 , 3 ) ; ( 0 , 3 ) <--> ( 0 , 2 ) ; <ADJLIST_END> <ORIGIN_START> ( 2 , 3 ) <ORIGIN_END> <TARGET_START> ( 0 , 0 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 2 , 3 ) ( 2 , 2 ) ( 1 , 2 ) ( 1 , 1 ) ( 0 , 1 ) ( 0 , 0 ) <PATH_END>

OUTPUT:
To find a path from the origin (2, 3) to the target (0, 0) in the given maze, we can follow these steps:

1. Start at (2, 3).
2. From (2, 3), we can move to (2, 2) or (2, 4) based on the adjacency list.
3. Choose (2, 2) as it seems closer to the target.
4. From (2, 2), we can move to (1, 2) or (2, 3). Avoid going back to (2, 3).
5. Move to (1, 2).
6. From (1, 2), we can move to (1, 1) or (2, 2). Avoid going back to (2, 2).
7. Move to (1, 1).
8. From (1, 1), we can move to (0, 1) or (1, 2). Avoid going back to (1, 2).
9. Move to (0, 1).
10. From (0, 1), we can move to (0, 0) or (1, 1). Avoid going back to (1, 1).
11. Move to (0, 0), which is the target.

Here is the path:
<PATH_START> ( 2 , 3 ) ( 2 , 2 ) ( 1 , 2 ) ( 1 , 1 ) ( 0 , 1 ) ( 0 , 0 ) <PATH_END>

HUMAN VERIFICATION:
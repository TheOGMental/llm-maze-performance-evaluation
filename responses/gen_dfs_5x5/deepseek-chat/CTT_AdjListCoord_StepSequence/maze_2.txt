INPUT:
<ADJLIST_START> ( 0 , 1 ) <--> ( 0 , 0 ) ; ( 3 , 2 ) <--> ( 2 , 2 ) ; ( 2 , 1 ) <--> ( 1 , 1 ) ; ( 1 , 2 ) <--> ( 1 , 3 ) ; ( 1 , 1 ) <--> ( 1 , 0 ) ; ( 3 , 3 ) <--> ( 2 , 3 ) ; ( 1 , 0 ) <--> ( 0 , 0 ) ; ( 0 , 4 ) <--> ( 0 , 3 ) ; ( 2 , 2 ) <--> ( 1 , 2 ) ; ( 2 , 4 ) <--> ( 2 , 3 ) ; ( 4 , 3 ) <--> ( 4 , 2 ) ; ( 4 , 2 ) <--> ( 3 , 2 ) ; ( 3 , 3 ) <--> ( 4 , 3 ) ; ( 2 , 4 ) <--> ( 1 , 4 ) ; ( 0 , 2 ) <--> ( 0 , 3 ) ; ( 1 , 4 ) <--> ( 0 , 4 ) ; ( 0 , 1 ) <--> ( 0 , 2 ) ; <ADJLIST_END> <ORIGIN_START> ( 1 , 0 ) <ORIGIN_END> <TARGET_START> ( 0 , 2 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 1 , 0 ) ( 0 , 0 ) ( 0 , 1 ) ( 0 , 2 ) <PATH_END>

OUTPUT:
To find a path from the origin (1, 0) to the target (0, 2) in the given maze, we can follow these steps using the adjacency list provided:

1. Start at (1, 0).
2. From (1, 0), we can move to (1, 1) or (0, 0).
   - Let's choose (1, 1) for a more direct path.
3. From (1, 1), we can move to (2, 1) or (1, 0).
   - Moving to (2, 1) doesn't seem helpful right now, so let's backtrack to (1, 0) and try the other option.
4. From (1, 0), move to (0, 0).
5. From (0, 0), we can move to (0, 1).
6. From (0, 1), we can move to (0, 2), which is our target.

So, the path is: (1, 0) → (0, 0) → (0, 1) → (0, 2).

Here is the path in the required format:
<PATH_START> ( 1 , 0 ) ( 0 , 0 ) ( 0 , 1 ) ( 0 , 2 ) <PATH_END>

HUMAN VERIFICATION: T
INPUT:
<ADJLIST_START> (0,0) <--> SOUTH (0,1) <--> SOUTH (0,3) <--> SOUTH (0,4) <--> SOUTH (1,4) <--> SOUTH (2,0) <--> SOUTH (2,4) <--> SOUTH (3,2) <--> SOUTH (4,4) <--> NORTH (0,0) <--> EAST (0,3) <--> EAST (1,2) <--> WEST (1,2) <--> EAST (2,1) <--> WEST (2,2) <--> WEST (2,2) <--> EAST (3,1) <--> WEST (3,2) <--> WEST (4,2) <--> EAST (4,3) <--> EAST <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (0,4) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (0,0) EAST (0,1) SOUTH (1,1) EAST (1,2) EAST (1,3) NORTH (0,3) EAST (0,4) <PATH_END>

OUTPUT:
To find a path from the origin (0,0) to the target (0,4) in the given maze, let's analyze the adjacency list step by step and construct the path.

### Adjacency List Interpretation:
1. (0,0) is connected to:
   - SOUTH to (0,1)
   - NORTH to (0,0) [This is a loop and can be ignored]
2. (0,1) is connected to:
   - SOUTH to (0,3)
3. (0,3) is connected to:
   - SOUTH to (0,4) [This is our target]
   - EAST to (0,4) [This is also our target]
4. (0,4) is connected to:
   - SOUTH to (1,4)
5. Other connections are not immediately relevant for the shortest path.

### Possible Path:
From the adjacency list, the most straightforward path is:
1. Start at (0,0).
2. Move SOUTH to (0,1).
3. Move SOUTH to (0,3).
4. Move SOUTH or EAST to (0,4) (target).

### Final Path:
The path is:
- (0,0) SOUTH (0,1) SOUTH (0,3) SOUTH (0,4)

### Path in Required Format:
<PATH_START> (0,0) SOUTH (0,1) SOUTH (0,3) SOUTH (0,4) <PATH_END>

HUMAN VERIFICATION:
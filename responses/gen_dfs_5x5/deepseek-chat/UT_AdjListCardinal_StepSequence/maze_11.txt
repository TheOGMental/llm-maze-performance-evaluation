INPUT:
<ADJLIST_START> (0,0) <--> SOUTH (1,2) <--> NORTH (2,1) <--> NORTH (2,2) <--> NORTH (3,0) <--> NORTH (2,2) <--> SOUTH (4,1) <--> NORTH (3,2) <--> SOUTH (0,1) <--> WEST (0,2) <--> WEST (1,1) <--> WEST (2,0) <--> EAST (4,1) <--> EAST <ADJLIST_END> <ORIGIN_START> (0,2) <ORIGIN_END> <TARGET_START> (3,1) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (0,2) SOUTH (1,2) SOUTH (2,2) SOUTH (3,2) SOUTH (4,2) WEST (4,1) NORTH (3,1) <PATH_END>

OUTPUT:
To find a path from the origin (0,2) to the target (3,1) in the given maze, let's analyze the adjacency list and explore possible routes step by step.

### Adjacency List Interpretation:
1. (0,0) <--> SOUTH (1,0)
2. (1,2) <--> NORTH (0,2)
3. (2,1) <--> NORTH (1,1)
4. (2,2) <--> NORTH (1,2), SOUTH (3,2)
5. (3,0) <--> NORTH (2,0)
6. (4,1) <--> NORTH (3,1), EAST (4,2)
7. (3,2) <--> SOUTH (4,2)
8. (0,1) <--> WEST (0,0), EAST (0,2)
9. (0,2) <--> WEST (0,1), EAST (0,3)
10. (1,1) <--> WEST (1,0), EAST (1,2)
11. (2,0) <--> EAST (2,1)
12. (4,1) <--> EAST (4,2)

### Step-by-Step Path:
1. Start at origin: (0,2)
2. From (0,2), move WEST to (0,1)
   - (0,2) <--> WEST (0,1)
3. From (0,1), move WEST to (0,0)
   - (0,1) <--> WEST (0,0)
4. From (0,0), move SOUTH to (1,0)
   - (0,0) <--> SOUTH (1,0)
5. From (1,0), move EAST to (1,1)
   - Assuming (1,0) is connected to (1,1) via EAST (implied by adjacency list)
6. From (1,1), move EAST to (1,2)
   - (1,1) <--> EAST (1,2)
7. From (1,2), move NORTH to (0,2)
   - (1,2) <--> NORTH (0,2)
   - This is a loop, so we need an alternative path.
8. Alternative from (1,1), move NORTH to (2,1)
   - (2,1) <--> NORTH (1,1)
9. From (2,1), move NORTH to (1,1)
   - Another loop, so try another path.
10. From (1,1), move WEST to (1,0)
    - Then move SOUTH to (2,0)
    - (2,0) <--> EAST (2,1)
11. From (2,0), move EAST to (2,1)
12. From (2,1), move NORTH to (1,1)
    - Again a loop, so this path is not working.

### Alternative Path:
1. Start at origin: (0,2)
2. From (0,2), move EAST to (0,3)
   - Assuming (0,2) <--> EAST (0,3) is valid (though not explicitly in the list)
   - But (0,3) is not in the adjacency list, so this move is invalid.
3. From (0,2), move WEST to (0,1)
4. From (0,1), move EAST to (0,2)
   - Loop again.

### Correct Path:
After exploring, here's a valid path:
1. (0,2) -> WEST to (0,1)
2. (0,1) -> WEST to (0,0)
3. (0,0) -> SOUTH to (1,0)
4. (1,0) -> EAST to (1,1)
5. (1,1) -> EAST to (1,2)
6. (1,2) -> NORTH to (0,2) (loop, so backtrack)
7. (1,2) -> SOUTH to (2,2)
8. (2,2) -> SOUTH to (3,2)
9. (3,2) -> SOUTH to (4,2)
10. (4,2) -> WEST to (4,1)
11. (4,1) -> NORTH to (3,1) (target)

### Final Path:
(0,2) WEST (0,1) WEST (0,0) SOUTH (1,0) EAST (1,1) EAST (1,2) SOUTH (2,2) SOUTH (3,2) SOUTH (4,2) WEST (4,1) NORTH (3,1)

HUMAN VERIFICATION: F
INPUT:
<ADJLIST_START> ( 0 , 0 ) <--> SOUTH ( 0 , 2 ) <--> SOUTH ( 2 , 0 ) <--> NORTH ( 2 , 4 ) <--> NORTH ( 3 , 0 ) <--> NORTH ( 3 , 4 ) <--> NORTH ( 3 , 0 ) <--> SOUTH ( 3 , 2 ) <--> SOUTH ( 3 , 3 ) <--> SOUTH ( 4 , 4 ) <--> NORTH ( 0 , 3 ) <--> WEST ( 0 , 3 ) <--> EAST ( 1 , 2 ) <--> EAST ( 1 , 3 ) <--> EAST ( 3 , 2 ) <--> EAST ( 4 , 0 ) <--> EAST ( 4 , 2 ) <--> WEST ( 4 , 4 ) <--> WEST <ADJLIST_END> <ORIGIN_START> ( 4 , 0 ) <ORIGIN_END> <TARGET_START> ( 2 , 0 ) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> ( 4 , 0 ) NORTH ( 3 , 0 ) NORTH ( 2 , 0 ) <PATH_END>

OUTPUT:
To find a path from the origin (4, 0) to the target (2, 0) in the given maze, we can follow these steps:

### Adjacency List Representation:
The maze is represented by the following adjacency list:
- (0, 0) <--> SOUTH (0, 2)
- (0, 2) <--> SOUTH (2, 0)
- (2, 0) <--> NORTH (2, 4)
- (2, 4) <--> NORTH (3, 0)
- (3, 0) <--> NORTH (3, 4)
- (3, 4) <--> NORTH (3, 0)
- (3, 0) <--> SOUTH (3, 2)
- (3, 2) <--> SOUTH (3, 3)
- (3, 3) <--> SOUTH (4, 4)
- (4, 4) <--> NORTH (0, 3)
- (0, 3) <--> WEST (0, 3)
- (0, 3) <--> EAST (1, 2)
- (1, 2) <--> EAST (1, 3)
- (1, 3) <--> EAST (3, 2)
- (3, 2) <--> EAST (4, 0)
- (4, 0) <--> EAST (4, 2)
- (4, 2) <--> WEST (4, 4)
- (4, 4) <--> WEST

### Path from (4, 0) to (2, 0):
1. Start at the origin: (4, 0)
2. From (4, 0), move EAST to (4, 2)
3. From (4, 2), move WEST to (4, 4)
4. From (4, 4), move NORTH to (3, 3)
5. From (3, 3), move NORTH to (3, 2)
6. From (3, 2), move NORTH to (3, 0)
7. From (3, 0), move NORTH to (3, 4)
8. From (3, 4), move NORTH to (2, 4)
9. From (2, 4), move NORTH to (2, 0)

### Final Path:
(4, 0) EAST (4, 2) WEST (4, 4) NORTH (3, 3) NORTH (3, 2) NORTH (3, 0) NORTH (3, 4) NORTH (2, 4) NORTH (2, 0)

This path successfully navigates from the origin (4, 0) to the target (2, 0).

HUMAN VERIFICATION:
INPUT:
<ADJLIST_START> (2,3) <--> (3,3) ; (0,0) <--> (0,1) ; (0,4) <--> (0,3) ; (2,2) <--> (3,2) ; (1,4) <--> (0,4) ; (3,3) <--> (4,3) ; (0,0) <--> (1,0) ; (1,4) <--> (2,4) ; (1,2) <--> (1,3) ; (1,1) <--> (2,1) ; (2,4) <--> (2,3) ; (2,2) <--> (1,2) ; (0,2) <--> (0,3) ; (1,1) <--> (1,0) ; (4,2) <--> (4,3) ; (0,1) <--> (0,2) ; (3,2) <--> (4,2) ; <ADJLIST_END> <ORIGIN_START> (1,0) <ORIGIN_END> <TARGET_START> (0,2) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (1,0) (0,0) (0,1) (0,2) <PATH_END>

OUTPUT:
To find a path from the origin (1,0) to the target (0,2) in the given maze, we can follow these steps using the adjacency list provided:

1. Start at the origin: (1,0)
2. From (1,0), the adjacent cells are (0,0) and (1,1).
3. Choose (1,1) as the next step.
4. From (1,1), the adjacent cells are (1,0), (2,1), and (1,0). We can't go back to (1,0), so we choose (2,1).
5. From (2,1), there are no further connections listed, so we backtrack to (1,1).
6. From (1,1), we can try another path. However, the only other adjacent cell is (1,0), which we've already visited.
7. This suggests we need to explore from (1,0) to (0,0).
8. From (0,0), the adjacent cells are (0,1) and (1,0).
9. Choose (0,1) as the next step.
10. From (0,1), the adjacent cells are (0,0) and (0,2).
11. Choose (0,2), which is our target.

Thus, the path from the origin to the target is:
(1,0) → (0,0) → (0,1) → (0,2)

Here is the path in the required format:
<PATH_START> (1,0) (0,0) (0,1) (0,2) <PATH_END>

HUMAN VERIFICATION:
INPUT:
<ADJLIST_START> (4,4) <--> (3,4) ; (1,1) <--> (1,2) ; (1,2) <--> (1,3) ; (3,1) <--> (2,1) ; (0,4) <--> (1,4) ; (3,2) <--> (2,2) ; (2,0) <--> (2,1) ; (0,4) <--> (0,3) ; (2,4) <--> (1,4) ; (3,4) <--> (2,4) ; (3,2) <--> (4,2) ; (4,1) <--> (3,1) ; (1,0) <--> (1,1) ; (4,1) <--> (4,2) ; (2,0) <--> (1,0) ; (3,3) <--> (2,3) ; (0,3) <--> (1,3) ; (4,3) <--> (3,3) ; (4,4) <--> (4,3) ; <ADJLIST_END> <ORIGIN_START> (1,3) <ORIGIN_END> <TARGET_START> (0,3) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (1,3) (0,3) <PATH_END>

OUTPUT:
To find a path from the origin (1,3) to the target (0,3) in the given maze, we can follow the adjacency list step by step. Here's one possible path:

1. Start at (1,3).
2. From (1,3), move to (1,2) (since (1,3) <--> (1,2)).
3. From (1,2), move to (1,1) (since (1,2) <--> (1,1)).
4. From (1,1), move to (1,0) (since (1,1) <--> (1,0)).
5. From (1,0), move to (2,0) (since (1,0) <--> (2,0)).
6. From (2,0), move to (2,1) (since (2,0) <--> (2,1)).
7. From (2,1), move to (3,1) (since (2,1) <--> (3,1)).
8. From (3,1), move to (4,1) (since (3,1) <--> (4,1)).
9. From (4,1), move to (4,2) (since (4,1) <--> (4,2)).
10. From (4,2), move to (3,2) (since (4,2) <--> (3,2)).
11. From (3,2), move to (2,2) (since (3,2) <--> (2,2)).
12. From (2,2), there is no direct connection to (2,3), so we need to find another path. However, looking back, we can see that (1,3) is directly connected to (0,3), which is the target.

Wait a minute, this seems overly complicated. Let me re-examine the adjacency list for a more direct path.

Upon re-examining, I see that (1,3) is directly connected to (0,3), which is the target. So the shortest path is:

(1,3) -> (0,3)

Thus, the path is:
<PATH_START> (1,3) (0,3) <PATH_END>

HUMAN VERIFICATION:
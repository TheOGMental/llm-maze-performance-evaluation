INPUT:
<ADJLIST_START> (3,0) <--> (4,0) ; (0,4) <--> (1,4) ; (3,2) <--> (2,2) ; (4,2) <--> (4,1) ; (1,2) <--> (2,2) ; (3,4) <--> (4,4) ; (1,4) <--> (2,4) ; (2,3) <--> (3,3) ; (4,4) <--> (4,3) ; (1,3) <--> (2,3) ; (0,1) <--> (1,1) ; (0,3) <--> (1,3) ; (4,1) <--> (4,0) ; (3,4) <--> (2,4) ; (3,2) <--> (3,1) ; (2,1) <--> (2,0) ; (3,1) <--> (2,1) ; (0,1) <--> (0,2) ; (4,2) <--> (4,3) ; (0,3) <--> (0,4) ; (1,0) <--> (1,1) ; (2,0) <--> (3,0) ; (1,2) <--> (0,2) ; <ADJLIST_END> <ORIGIN_START> (3,1) <ORIGIN_END> <TARGET_START> (1,4) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (3,1) (2,1) (2,0) (3,0) (4,0) (4,1) (4,2) (4,3) (4,4) (3,4) (2,4) (1,4) <PATH_END>

OUTPUT:
To find a path from the origin (3,1) to the target (1,4) in the given maze, we can follow these steps using the adjacency list provided:

1. Start at (3,1).
2. From (3,1), we can move to (3,2) or (2,1).
3. Let's choose (2,1) next.
   - (3,1) <--> (2,1)
4. From (2,1), we can move to (2,0) or (3,1). We came from (3,1), so we choose (2,0).
   - (2,1) <--> (2,0)
5. From (2,0), we can move to (3,0) or (2,1). We came from (2,1), so we choose (3,0).
   - (2,0) <--> (3,0)
6. From (3,0), we can move to (4,0) or (2,0). We came from (2,0), so we choose (4,0).
   - (3,0) <--> (4,0)
7. From (4,0), we can move to (4,1) or (3,0). We came from (3,0), so we choose (4,1).
   - (4,0) <--> (4,1)
8. From (4,1), we can move to (4,2) or (4,0). We came from (4,0), so we choose (4,2).
   - (4,1) <--> (4,2)
9. From (4,2), we can move to (4,3) or (4,1). We came from (4,1), so we choose (4,3).
   - (4,2) <--> (4,3)
10. From (4,3), we can move to (4,4) or (4,2). We came from (4,2), so we choose (4,4).
    - (4,3) <--> (4,4)
11. From (4,4), we can move to (3,4) or (4,3). We came from (4,3), so we choose (3,4).
    - (3,4) <--> (4,4)
12. From (3,4), we can move to (2,4) or (4,4). We came from (4,4), so we choose (2,4).
    - (3,4) <--> (2,4)
13. From (2,4), we can move to (1,4) or (3,4). We came from (3,4), so we choose (1,4).
    - (1,4) <--> (2,4)

Now, we have reached the target (1,4). 

The path is:
(3,1) -> (2,1) -> (2,0) -> (3,0) -> (4,0) -> (4,1) -> (4,2) -> (4,3) -> (4,4) -> (3,4) -> (2,4) -> (1,4)

Here is the path in the required format:
<PATH_START> (3,1) (2,1) (2,0) (3,0) (4,0) (4,1) (4,2) (4,3) (4,4) (3,4) (2,4) (1,4) <PATH_END>

HUMAN VERIFICATION:
INPUT:
<ADJLIST_START> (2,0) <--> (2,1) ; (3,3) <--> (2,3) ; (0,0) <--> (1,0) ; (3,0) <--> (2,0) ; (3,2) <--> (3,3) ; (0,1) <--> (0,0) ; (2,4) <--> (2,3) ; (1,4) <--> (1,3) ; (3,0) <--> (4,0) ; (3,2) <--> (3,1) ; (1,2) <--> (1,1) ; (4,1) <--> (4,0) ; (1,4) <--> (2,4) ; (0,2) <--> (0,1) ; (0,3) <--> (0,4) ; (4,1) <--> (3,1) ; (1,2) <--> (1,3) ; (0,3) <--> (0,2) ; (1,0) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (2,1) <ORIGIN_END> <TARGET_START> (1,4) <TARGET_END> 

EXPECTED SOLUTION:
<PATH_START> (2,1) (2,0) (3,0) (4,0) (4,1) (3,1) (3,2) (3,3) (2,3) (2,4) (1,4) <PATH_END>

OUTPUT:
Here's a path from the origin (2,1) to the target (1,4) based on the provided adjacency list:

**Path:**

(2,1) (2,0) (3,0) (4,0) (4,1) (3,1) (3,2) (3,3) (2,3) (2,4) (1,4)


HUMAN VERIFICATION: